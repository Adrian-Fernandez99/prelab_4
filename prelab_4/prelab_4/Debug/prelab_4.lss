
prelab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006f5  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  0000095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000261  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003af  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000166c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 92 00 	call	0x124	; 0x124 <main>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <configurar_interrupciones>:
#include <avr/interrupt.h>

volatile uint16_t contador = 0;  // Contador de 16 bits

void configurar_interrupciones() {
	PCICR |= (1 << PCIE0);  // Habilitar interrupciones en el puerto B (PCINT0-7)
  90:	e8 e6       	ldi	r30, 0x68	; 104
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4) | (1 << PCINT5);  // Habilitar interrupciones en PB4 y PB5
  9a:	eb e6       	ldi	r30, 0x6B	; 107
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 63       	ori	r24, 0x30	; 48
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <__vector_3>:
}

ISR(PCINT0_vect) {
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
	// Leer el estado de los botones
	if (!(PINB & (1 << PB4))) {
  b4:	1c 99       	sbic	0x03, 4	; 3
  b6:	09 c0       	rjmp	.+18     	; 0xca <__vector_3+0x24>
		contador++;  // Incrementar contador si PB4 está en LOW
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (!(PINB & (1 << PB5))) {
  ca:	1d 99       	sbic	0x03, 5	; 3
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <__vector_3+0x3a>
		contador--;  // Decrementar contador si PB5 está en LOW
  ce:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
  e0:	9f 91       	pop	r25
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <actualizar_display>:

void actualizar_display() {
	PORTB = (PORTB & 0xF0) | (contador & 0x0F);  // Parte baja en PB0-PB3
  ee:	25 b1       	in	r18, 0x05	; 5
  f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f8:	92 2f       	mov	r25, r18
  fa:	90 7f       	andi	r25, 0xF0	; 240
  fc:	8f 70       	andi	r24, 0x0F	; 15
  fe:	89 2b       	or	r24, r25
 100:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & 0xF0) | ((contador >> 4) & 0x0F);  // Parte alta en PC0-PC3
 102:	28 b1       	in	r18, 0x08	; 8
 104:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 108:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 10c:	92 95       	swap	r25
 10e:	82 95       	swap	r24
 110:	8f 70       	andi	r24, 0x0F	; 15
 112:	89 27       	eor	r24, r25
 114:	9f 70       	andi	r25, 0x0F	; 15
 116:	89 27       	eor	r24, r25
 118:	92 2f       	mov	r25, r18
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	89 2b       	or	r24, r25
 120:	88 b9       	out	0x08, r24	; 8
 122:	08 95       	ret

00000124 <main>:
}

int main(void) {
	DDRB |= 0x0F;  // Configurar PB0-PB3 como salida
 124:	84 b1       	in	r24, 0x04	; 4
 126:	8f 60       	ori	r24, 0x0F	; 15
 128:	84 b9       	out	0x04, r24	; 4
	DDRC |= 0x0F;  // Configurar PC0-PC3 como salida
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	87 b9       	out	0x07, r24	; 7
	DDRB &= ~((1 << PB4) | (1 << PB5));  // Configurar PB4 y PB5 como entrada
 130:	84 b1       	in	r24, 0x04	; 4
 132:	8f 7c       	andi	r24, 0xCF	; 207
 134:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << PB4) | (1 << PB5);  // Habilitar pull-ups internos en PB4 y PB5
 136:	85 b1       	in	r24, 0x05	; 5
 138:	80 63       	ori	r24, 0x30	; 48
 13a:	85 b9       	out	0x05, r24	; 5
	
	configurar_interrupciones();
 13c:	0e 94 48 00 	call	0x90	; 0x90 <configurar_interrupciones>
	sei();  // Habilitar interrupciones globales
 140:	78 94       	sei

	while (1) {
		actualizar_display();  // Actualizar salidas con el valor del contador
 142:	0e 94 77 00 	call	0xee	; 0xee <actualizar_display>
 146:	fd cf       	rjmp	.-6      	; 0x142 <main+0x1e>

00000148 <_exit>:
 148:	f8 94       	cli

0000014a <__stop_program>:
 14a:	ff cf       	rjmp	.-2      	; 0x14a <__stop_program>
