
prelab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000710  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000065c  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027b  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000390  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000061  00000000  00000000  00001620  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <cont_8bits>:
    }
}

void cont_8bits()
{
	PORTB = (PORTB & 0xF0) | (contador & 0x0F);
  90:	95 b1       	in	r25, 0x05	; 5
  92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  96:	90 7f       	andi	r25, 0xF0	; 240
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	89 2b       	or	r24, r25
  9c:	85 b9       	out	0x05, r24	; 5
	PORTB = (PORTB & 0xF0) | (contador & 0xF0);
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	89 2b       	or	r24, r25
  a6:	80 7f       	andi	r24, 0xF0	; 240
  a8:	85 b9       	out	0x05, r24	; 5
  aa:	08 95       	ret

000000ac <setup>:
}

void setup()
{
	cli();
  ac:	f8 94       	cli
	
	DDRD = 0xFF;
  ae:	9f ef       	ldi	r25, 0xFF	; 255
  b0:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x00;
  b2:	1b b8       	out	0x0b, r1	; 11
	
	DDRB &= ~((1 << PORTB4) | (1 << PORTB5));
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	8f 7c       	andi	r24, 0xCF	; 207
  b8:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1 << PORTB4) | (1 << PORTB5));
  ba:	85 b1       	in	r24, 0x05	; 5
  bc:	80 63       	ori	r24, 0x30	; 48
  be:	85 b9       	out	0x05, r24	; 5
	
	PCMSK0 |= ~((1 << PORTB4) | (1 << PORTB5));
  c0:	eb e6       	ldi	r30, 0x6B	; 107
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	8f 6c       	ori	r24, 0xCF	; 207
  c8:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0);
  ca:	e8 e6       	ldi	r30, 0x68	; 104
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	80 83       	st	Z, r24
	
	DDRD = 0x00;
  d4:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0xFF;
  d6:	9b b9       	out	0x0b, r25	; 11

	sei();
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <main>:
void setup();
void cont_8bits();

int main(void)
{
   setup();
  dc:	0e 94 56 00 	call	0xac	; 0xac <setup>
	
    while (1) 
    {
		cont_8bits();
  e0:	0e 94 48 00 	call	0x90	; 0x90 <cont_8bits>
  e4:	fd cf       	rjmp	.-6      	; 0xe0 <main+0x4>

000000e6 <__vector_3>:

	sei();
}

ISR(PCINT0_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
	uint8_t boton = PINB & ((1 << PORTB4) | (1 << PORTB5));
  f4:	83 b1       	in	r24, 0x03	; 3
	
	if (!(boton & (1 << PORTB4)))
  f6:	84 fd       	sbrc	r24, 4
  f8:	05 c0       	rjmp	.+10     	; 0x104 <__vector_3+0x1e>
	{
		contador++;
  fa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fe:	9f 5f       	subi	r25, 0xFF	; 255
 100:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (!(boton & (1 << PORTB5)))
 104:	85 fd       	sbrc	r24, 5
 106:	05 c0       	rjmp	.+10     	; 0x112 <__vector_3+0x2c>
	{
		contador--;
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 112:	9f 91       	pop	r25
 114:	8f 91       	pop	r24
 116:	0f 90       	pop	r0
 118:	0f be       	out	0x3f, r0	; 63
 11a:	0f 90       	pop	r0
 11c:	1f 90       	pop	r1
 11e:	18 95       	reti

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
