
prelab_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000019e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ea  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000275  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038a  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000003c  00000000  00000000  000015e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 79 00 	jmp	0xf2	; 0xf2 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 74 00 	call	0xe8	; 0xe8 <main>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <cont_8bits>:
    }
}

void cont_8bits()
{
	PORTB = (PORTB & 0xF0) | (contador & 0x0F);
  90:	95 b1       	in	r25, 0x05	; 5
  92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  96:	90 7f       	andi	r25, 0xF0	; 240
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	89 2b       	or	r24, r25
  9c:	85 b9       	out	0x05, r24	; 5
	PORTC = (PORTC & 0xF0) | ((contador >> 4) & 0x0F);
  9e:	98 b1       	in	r25, 0x08	; 8
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	90 7f       	andi	r25, 0xF0	; 240
  a6:	82 95       	swap	r24
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	89 2b       	or	r24, r25
  ac:	88 b9       	out	0x08, r24	; 8
  ae:	08 95       	ret

000000b0 <setup>:
}

void setup()
{
	cli();
  b0:	f8 94       	cli
	
	// Se configuran puertos
	DDRD |= 0xFF;		// Puerto D es salida
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0x00;
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	9b b9       	out	0x0b, r25	; 11
	
	DDRC |= 0xFF;		// Puerto C es salida
  bc:	97 b1       	in	r25, 0x07	; 7
  be:	87 b9       	out	0x07, r24	; 7
	PORTC |= 0x00;
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	88 b9       	out	0x08, r24	; 8
	
	DDRB |= 0x0F;		// La mitad del puerto B es salida y la otra entrada
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	84 b9       	out	0x04, r24	; 4
	PORTB |= ((1 << PORTB4) | (1 << PORTB5));
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	80 63       	ori	r24, 0x30	; 48
  ce:	85 b9       	out	0x05, r24	; 5
	
	// Se configuran las interrupciones
	PCMSK0 |= (1 << PORTB4) | (1 << PORTB5);
  d0:	eb e6       	ldi	r30, 0x6B	; 107
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 63       	ori	r24, 0x30	; 48
  d8:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0);
  da:	e8 e6       	ldi	r30, 0x68	; 104
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24

	sei();
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <main>:
void setup();
void cont_8bits();

int main(void)
{
   setup();
  e8:	0e 94 58 00 	call	0xb0	; 0xb0 <setup>
	
    while (1) 
    {
		cont_8bits();
  ec:	0e 94 48 00 	call	0x90	; 0x90 <cont_8bits>
  f0:	fd cf       	rjmp	.-6      	; 0xec <main+0x4>

000000f2 <__vector_3>:

	sei();
}

ISR(PCINT0_vect)
{
  f2:	1f 92       	push	r1
  f4:	0f 92       	push	r0
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	0f 92       	push	r0
  fa:	11 24       	eor	r1, r1
  fc:	8f 93       	push	r24
	
	if (!(PINB & (1 << PORTB4)))
  fe:	1c 99       	sbic	0x03, 4	; 3
 100:	05 c0       	rjmp	.+10     	; 0x10c <__vector_3+0x1a>
	{
		contador++;
 102:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if (!(PINB & (1 << PORTB5)))
 10c:	1d 99       	sbic	0x03, 5	; 3
 10e:	05 c0       	rjmp	.+10     	; 0x11a <__vector_3+0x28>
	{
		contador--;
 110:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	81 50       	subi	r24, 0x01	; 1
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
 11a:	8f 91       	pop	r24
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
